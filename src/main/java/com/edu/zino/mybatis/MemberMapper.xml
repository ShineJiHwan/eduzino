<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Member">
	
	<!-- 
	  강사 테이블 조회 맵 
	 -->
	 <resultMap type="Member" id="memberTeacherMap">
	 	<id column="member_idx" property="member_idx"/>
	<result column="member_nickname" property="member_nickname" />
	<result column="member_regdate" property="member_regdate" />
	
	<!-- 강사인지 아닌지 조회하기 -->
	<association 
	column="teacher_idx"
	property="teacher"
	javaType="Teacher"
	select="Teacher.select" 
	/>
	 </resultMap>
	 
	 <resultMap type="Member" id="membermap"> 
	<id 	column="member_idx"		property="member_idx"/>
	<result column="member_nickname"	property="member_nickname"/>
	<result column="member_id"	property="member_id"/>
	
	<!-- Birthday -->
	<association 
		column="birthday_idx"
		property="birthday"
		javaType="Birthday"
		select="Birthday.selectByMember"
		/>
		
	<!-- Email -->	
	<association  
		column="email_idx"
		property="email"
		javaType="Email"
		select="Email.selectByMember"
		/>
		
	<!-- ProfilePhoto -->	
	<association  
		column="profile_photo_idx"
		property="profile_photo"
		javaType="ProfilePhoto"
		select="ProfilePhoto.selectByMember"
		/>
		
	<!-- SNS 로그인 방식 -->
	<association
		column="sns_name_idx"
		property="sns_name"
		javaType="snsName"
		select="SnsName.selectByMember"
		/>
		
	<!-- 선생님 여부 -->
	<association
		column="teacher_idx"
		property="teacher"
		javaType="teacher"
		select="Teacher.selectByTeacher"
		/>
		
	<!-- 블랙리스트 -->
	<association
		column="blacklist_idx"
		property="blacklist"
		javaType="blacklist"
		select="Blacklist.selectByMember"
		/>
	
</resultMap>

	<!-- 전부 가져오기 -->
	<select id="selectAll" resultType="Member">
		select * from member
	</select>
	
	
	<!-- 학생 한명 가져오기 -->
	<select id="select" resultMap="memberTeacherMap" parameterType="int">
		select * from member
		where member_idx = #{member_idx}
	</select>
	
	<!-- 고유 id를 통한 회원조회 -->
	<select id="selectById" resultType="Member" parameterType="String">
		select * from member
		where id = #{id}
	</select>
	
	<!-- 가입하기 -->
	<insert id="insert" parameterType="Member">
		insert into member(member_idx, nickname, id)
		values(#{member_idx}, #{nickname}, #{id})
	</insert>
	
	<!-- 수정하기. 수정하기 위해선 각각 테이블이 할 일을 하고 Dao에서 처리하면 됨; 실패시 rollback(트랜잭션을 위해) -->
	<update id="update" parameterType="Member">
		update member set nickname=#{nickname}, id=#{id}
		where member_idx=#{member_idx} 	
	</update>
	
	<!-- 삭제하기: 활성/ 비활성화로 -->
	<delete id="delete" parameterType="Member">
		delete from member where id=#{id}
	</delete>
	

</mapper>